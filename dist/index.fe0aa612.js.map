{"mappings":"0DAAA,IAAIA,EAAQ,wBAIYC,EAAKC,KAAUC,GACrC,MAAO,KACLF,QACAC,YACAC,KAIWH,EAAAA,QAAAA,6FCVf,MAAMI,EAAW,CACfC,OAAM,CAAGC,EAAOC,KACdA,EAAUC,UAAY,KAkGXJ,EAAAA,QAAAA,gECnGf,MAAMK,EACJC,EADFC,QAAAC,cAAA,MAAA,CACOC,UAAU,SAAf,MAEEH,EAAAC,QAAAC,cAAA,OAAA,KAAA,QAUJE,QAAQC,IAAIN,GASZL,EAAAA,QAASC,OAAOK,EAAAC,QAAAC,0BAdd,OAAOF,EAAAC,QAAAC,cAAA,MAAA,KAAA,SAcTR,CAAsBY,MAAM,QAASC,SAASC,eAAe","sources":["react/index.js","react-dom/index.js","index.js"],"sourcesContent":["let React = {\r\n  createElement \r\n}\r\n\r\nfunction createElement (tag, attrs, ...childrens) {\r\n  return {\r\n    tag,\r\n    attrs,\r\n    childrens\r\n  }\r\n}\r\n\r\nexport default React","import Component from '../react-dom/index'\r\n\r\nconst ReactDOM = {\r\n  render: (vnode, container) => {\r\n    container.innerHTML = ''\r\n    return render (vnode, container)\r\n  }\r\n}\r\n\r\nfunction _render (vnode) {\r\n  if (vnode === undefined || vnode === null || typeof vnode === 'boolean') vnode = ''\r\n  if (typeof vnode === 'string') {\r\n    return document.createTextNode(vnode)\r\n  }\r\n\r\n  // 判断是否为函数组件【根据tag来分析】\r\n  if (typeof vnode.tag === 'function') {\r\n    // 1.创建组件\r\n    const comp = createComponent(vnode.tag, vnode.attrs)\r\n    // 2.设置组件的属性\r\n    setComponentProps(comp, vnode.attrs)\r\n    // 3.组件渲染的节点对象返回\r\n    return comp.base\r\n  }\r\n\r\n\r\n  const { tag, attrs, childrens } = vnode\r\n  const dom = document.createElement(tag)\r\n\r\n  if (attrs) {\r\n    Object.keys(attrs).forEach(key => {\r\n      const value = attrs[key]\r\n      setAttribute(dom, key, value)\r\n    })\r\n  }\r\n\r\n  if (childrens?.length > 0) {\r\n    for (let item of childrens) {\r\n      render(item, dom)\r\n    }\r\n  }\r\n  return dom\r\n}\r\n\r\nfunction render (vnode, container) {\r\n  // return container.appendChild(_render(vnode))\r\n}\r\n\r\n// 创建自定义组件\r\n// vnode.tag, vnode.attrs\r\nfunction createComponent (comp, props) {\r\n  let inst\r\n  // 原型链非空，还有render方法，那么一定是类组件\r\n  if (comp.prototype && comp.prototype.render) {\r\n    inst = new comp(props)\r\n  } else {\r\n    // 如果不是类组件，我们就也是用类组件创建\r\n    inst = new Component (props)\r\n    inst.constructor = comp\r\n    inst.render = function () {\r\n      return this.constructor(props)\r\n    }\r\n  }\r\n  return inst\r\n}\r\n\r\n// 设置属性【value为key对应的键值】\r\nfunction setAttribute (dom, key, value) {\r\n  // 将属性名的className转换成class\r\n  if (key === 'className') {\r\n    key = 'class'\r\n  }\r\n\r\n  // 转换事件\r\n  if (/on\\w+/.test(key)) {\r\n    key = key.toLowerCase()\r\n    dom[key] = value || ''\r\n  } else if (key === 'style') {\r\n    if (!value || typeof value === 'string') {\r\n      dom.style.cssText = value || '' \r\n    } else if (value && typeof value === 'object') {\r\n      for(let k in value) {\r\n        if (typeof value[k] === 'number') {\r\n          dom.style[k] = value[k] + 'px'\r\n        } else {\r\n          dom.style[k] = value[k]\r\n        }\r\n      }\r\n    }\r\n  } else {\r\n    if (key in dom) {\r\n      dom[key] = value || ''\r\n    }\r\n\r\n    if (value) {\r\n      dom.setAttribute(key, value)\r\n    } else {\r\n      dom.removeAttribute(key)\r\n    }\r\n  }\r\n}\r\n\r\nexport default ReactDOM","import React from './react/index'\r\nimport ReactDOM from './react-dom/index'\r\n\r\nconst element = (\r\n  <div className=\"attrs\">\r\n    123\r\n    <span>456</span>\r\n  </div>\r\n)\r\n\r\nfunction Home () {\r\n  return <div>\r\n    123\r\n  </div>\r\n}\r\n\r\nconsole.log(element)\r\n\r\n// const ele = 1\r\n\r\n// ReactDOM.render(ele, document.querySelector('#root'))\r\n\r\n// let element = 'str'\r\n// console.log(element);\r\n\r\nReactDOM.render(<Home title=\"tit\"/>, document.getElementById('root'))\r\n\r\n// console.log(ele)"],"names":["React","tag","attrs","childrens","ReactDOM","render","vnode","container","innerHTML","element","$a501d8345a242c58$var$_index2","default","createElement","className","console","log","title","document","getElementById"],"version":3,"file":"index.fe0aa612.js.map"}