{"mappings":"8KAgCgBA,EAAAA,gBAAAA,kGChCAC,EAAAA,cAAMC,EAAKC,EAAOC,GAEpBC,MAANC,WAQWJ,EAAKC,GACtB,IAAII,EAAML,EACNC,MAAAA,GAA0D,kBAAVA,IAAqBA,EAAQ,IAC5D,iBAAVA,IACTA,EAAQK,OAAOL,IAEjB,GAAqB,iBAAVA,EAWT,OAVID,GAAwB,IAAjBA,EAAIO,SACTP,EAAIQ,cAAgBP,IACtBD,EAAIQ,YAAcP,IAGpBI,EAAMI,SAASC,eAAeT,GAC1BD,GAAOA,EAAIW,YACbX,EAAIW,WAAWC,YAAYP,EAAKL,IAG7BK,EAIJL,IACHK,EAAMI,SAASI,cAAcZ,EAAMa,MAGrC,gBAGsBd,EAAKC,GAE3B,MAAMc,EAAWN,SAASO,cAAc,SAASC,WACjDC,QAAQC,IAAIJ,GAPZK,GACOf,EAjCKF,CAASH,EAAKC,GACtBC,GACFA,EAAUmB,YAAYjB,GAGxB,OAAOA,GDHT,MAAMkB,EAAW,QACfC,YA2BKC,EAA0BC,GAE/B,IAAIC,EAOJA,WAoCgBzB,GACZA,MAAAA,GAA0D,kBAAVA,IAAqBA,EAAQ,IAC5D,iBAAVA,IACTA,EAAQK,OAAOL,IAEjB,GAAqB,iBAAVA,EACT,OAAOQ,SAASC,eAAeT,GAKhBa,GAAQ,mBAAdb,EAAMa,IAAoB,CAE7BW,MAAAA,WAhFgBA,EAAME,GAC9B,IAAIC,EAgBJ,OAdIH,EAAKI,WAAaJ,EAAKI,UAAUN,OAEnCK,EAAO,IAAIH,EAAKE,IAEXC,EAEE,IAAIE,EAAAA,QAAUH,GAErBC,EAAKG,YAAcN,EAEnBG,EAAKL,OAAS,WACZ,OAAOS,KAAKD,YAAYJ,KAGrBC,EA+DQK,CAAgBhC,EAAMa,IAAKb,EAAMiC,OAI9C,gBAhCwBT,EAAME,GAC3BF,EAAKC,OACJD,EAAKU,oBACPV,EAAKU,qBAEHV,EAAKW,2BACPX,EAAKW,0BAA0BT,IAItBA,EAARA,MAAQA,EAEb7B,EAAgB2B,GAkBdY,CAAkBZ,EAAMxB,EAAMiC,OAEvBT,EAAKC,KAGd,MAAAZ,IAAQA,EAAFoB,MAAOA,EAAPI,UAAcA,GAAcrC,EAC5BD,EAAMS,SAASI,cAAcC,GAE/BoB,GACFK,OAAOC,KAAKN,GAAOO,SAAQC,IACzB,MAAMC,EAAQT,EAAMQ,aAmBH1C,EAAK0C,EAAKC,GAEnB,cAARD,IACFA,EAAM,SAIR,GAAA,QAAYE,KAAKF,GAEf1C,EADA0C,EAAMA,EAAIG,eACCF,GAAS,QACf,GAAY,UAARD,EACT,GAAKC,GAA0B,iBAAVA,GAEd,GAAIA,GAA0B,iBAAVA,EACzB,IAAI,IAAIG,KAAKH,EACa,iBAAbA,EAAMG,GACf9C,EAAI+C,MAAMD,GAAKH,EAAMG,GAAK,KAE1B9C,EAAI+C,MAAMD,GAAKH,EAAMG,QANzB9C,EAAI+C,MAAMC,QAAUL,GAAS,QAW3BD,KAAO1C,IACTA,EAAI0C,GAAOC,GAAS,IAGlBA,EACF3C,EAAIiD,aAAaP,EAAKC,GAEtB3C,EAAIkD,gBAAgBR,GAhDpBO,CAAajD,EAAK0C,EAAKC,MAI3B,GAAIL,GAAWa,OAAS,EACtB,IAAK,IAAIC,KAAQd,EACff,EAAO6B,EAAMpD,GAGjB,OAAOA,EAvEAqD,CAJU5B,EAAKF,UAMlBE,EAAKC,MACHD,EAAK6B,qBACP7B,EAAK6B,sBAEH7B,EAAK8B,oBACP9B,EAAK8B,sBAEE9B,EAAK+B,mBACd/B,EAAK+B,oBAGH/B,EAAKC,MAAQD,EAAKC,KAAKf,YAGpBe,EAAAA,KAAKf,WAAW8C,aAAa/B,EAAMD,EAAKC,MAE/CD,EAAKC,KAAOA,WAwDLH,EAAQtB,EAAOC,EAAWF,GACjC,OAAA,EAAO0D,EAAA3D,MAAKC,EAAKC,EAAOC,GAwCXoB,EAAAA,QAAAA,EE5IAQ,EAAAA,0BAbAH,EAAQ,IACnBK,KAAKL,MAAQA,EACbK,KAAK2B,MAAQ,GAGfC,SAAUC,GAEMtB,OAAPuB,OAAO9B,KAAK2B,MAAOE,MAE1BE,EAAAjE,iBAAgBkC,mECFLgC,EAAAC,QAAA,wBARSnD,EAAKoB,KAAUI,GACrC,MAAO,KACLxB,QACAoB,YACAI,IAMFR,UAAAA,EAAAA,8ECTF,MAAMoC,EACJC,EADFF,QAAApD,cAAA,MAAA,CACOuD,UAAU,SAAf,MAEED,EAAAF,QAAApD,cAAA,OAAA,KAAA,QAmEJS,EAAAA,QAASC,OAAO2C,EAAKzD,SAASO,cAAc","sources":["react-dom/index.js","react-dom/diff.js","react/component.js","react/index.js","index.js"],"sourcesContent":["import Component from '../react/component'\r\n\r\nimport { diff } from './diff'\r\n\r\nconst ReactDOM = {\r\n  render\r\n}\r\n\r\n// 创建自定义组件\r\n// vnode.tag, vnode.attrs\r\nfunction createComponent (comp, props) {\r\n  let inst\r\n  // 原型链非空，还有render方法，那么一定是类组件\r\n  if (comp.prototype && comp.prototype.render) {\r\n    // console.log(\"props\", props)\r\n    inst = new comp(props)\r\n    // console.log(\"inst\" ,inst)\r\n  } else {\r\n    // 如果不是类组件，我们就也是用类组件创建\r\n    inst = new Component(props)\r\n    // 将构造函数赋值，函数组件原来的tag就是函数本身，因此用于构造函数十分切合\r\n    inst.constructor = comp\r\n    // 每一个类组件都有一个render方法，对该render进行赋值给其他函数，并且是返回一个构造函数内部的jsx\r\n    inst.render = function () {\r\n      return this.constructor(props)\r\n    }\r\n  }\r\n  return inst\r\n}\r\n\r\n// 这是为了给comp内部添加base对象而设置的函数\r\n// 组件更新可以设置生命周期\r\nexport function renderComponent (comp) {\r\n  // 定义组件内部的节点对象\r\n  let base\r\n\r\n  // 拿到了元素\r\n  const renderer = comp.render()\r\n  // console.log(renderer)\r\n\r\n  // renderer是获取了类组件内部的元素，但还是需要一层_render()函数解析，不然还是无法解析\r\n  base = _render(renderer)\r\n\r\n  if (comp.base) {\r\n    if (comp.componentWillUpdate) {\r\n      comp.componentWillUpdate()\r\n    }\r\n    if (comp.componentDidUpdate) {\r\n      comp.componentDidUpdate()\r\n    }\r\n  } else if (comp.componentDidMount) {\r\n    comp.componentDidMount()\r\n  }\r\n\r\n  if (comp.base && comp.base.parentNode) {\r\n    // replaceChild是只能用于子组件，因此我们必须使用parentNode\r\n    // 将base赋值给comp.base\r\n    comp.base.parentNode.replaceChild(base, comp.base)\r\n  }\r\n  comp.base = base\r\n}\r\n\r\nfunction setComponentProps (comp, props) {\r\n  if (!comp.base) {\r\n    if (comp.componentWillMount) {\r\n      comp.componentWillMount()\r\n    }\r\n    if (comp.componentWillReceiveProps) {\r\n      comp.componentWillReceiveProps(props)\r\n    }\r\n  }\r\n  // 设置组件的属性\r\n  comp.props = props\r\n  // 渲染组件\r\n  renderComponent(comp)\r\n}\r\n\r\nfunction _render (vnode) {\r\n  if (vnode === undefined || vnode === null || typeof vnode === 'boolean') vnode = ''\r\n  if (typeof vnode === 'number') {\r\n    vnode = String(vnode)\r\n  }\r\n  if (typeof vnode === 'string') {\r\n    return document.createTextNode(vnode)\r\n  }\r\n\r\n  // 判断是否为函数组件或类组件【根据tag，也就是当前组件来分析】\r\n  // 必须在render下才能将attrs变成props\r\n  if (typeof vnode.tag === 'function') {\r\n    // 1.创建组件\r\n    const comp = createComponent(vnode.tag, vnode.attrs)\r\n    // 2.设置组件的属性，在这里，所有的属性都在这里变成了props\r\n    setComponentProps(comp, vnode.attrs)\r\n    // 3.组件渲染的节点对象返回\r\n    return comp.base\r\n  }\r\n\r\n  const { tag, attrs, childrens } = vnode\r\n  const dom = document.createElement(tag)\r\n\r\n  if (attrs) {\r\n    Object.keys(attrs).forEach(key => {\r\n      const value = attrs[key]\r\n      setAttribute(dom, key, value)\r\n    })\r\n  }\r\n\r\n  if (childrens?.length > 0) {\r\n    for (let item of childrens) {\r\n      render(item, dom)\r\n    }\r\n  }\r\n  return dom\r\n}\r\n\r\nfunction render (vnode, container, dom) {\r\n  return diff(dom, vnode, container)\r\n  // return container.appendChild(_render(vnode))\r\n}\r\n\r\n// 设置属性【value为key对应的键值】\r\nfunction setAttribute (dom, key, value) {\r\n  // 将属性名的className转换成class\r\n  if (key === 'className') {\r\n    key = 'class'\r\n  }\r\n\r\n  // 转换事件\r\n  if (/on\\w+/.test(key)) {\r\n    key = key.toLowerCase()\r\n    dom[key] = value || ''\r\n  } else if (key === 'style') {\r\n    if (!value || typeof value === 'string') {\r\n      dom.style.cssText = value || '' \r\n    } else if (value && typeof value === 'object') {\r\n      for(let k in value) {\r\n        if (typeof value[k] === 'number') {\r\n          dom.style[k] = value[k] + 'px'\r\n        } else {\r\n          dom.style[k] = value[k]\r\n        }\r\n      }\r\n    }\r\n  } else {\r\n    if (key in dom) {\r\n      dom[key] = value || ''\r\n    }\r\n\r\n    if (value) {\r\n      dom.setAttribute(key, value)\r\n    } else {\r\n      dom.removeAttribute(key)\r\n    }\r\n  }\r\n}\r\n\r\nexport default ReactDOM","export function diff (dom, vnode, container) {\r\n  // 对比节点的变化\r\n  const ret = diffNode(dom, vnode)\r\n  if (container) {\r\n    container.appendChild(ret)\r\n  }\r\n\r\n  return ret\r\n}\r\n\r\nfunction diffNode (dom, vnode) {\r\n  let out = dom\r\n  if (vnode === undefined || vnode === null || typeof vnode === 'boolean') vnode = ''\r\n  if (typeof vnode === 'number') {\r\n    vnode = String(vnode)\r\n  }\r\n  if (typeof vnode === 'string') {\r\n    if (dom && dom.nodeType === 3) {\r\n      if (dom.textContent !== vnode) {\r\n        dom.textContent = vnode\r\n      }\r\n    } else {\r\n      out = document.createTextNode(vnode)\r\n      if (dom && dom.parentNode) {\r\n        dom.parentNode.replaceNode(out, dom)\r\n      }\r\n    }\r\n    return out\r\n  }\r\n\r\n  // 非文本dom节点\r\n  if (!dom) {\r\n    out = document.createElement(vnode.tag)\r\n  }\r\n  diffAttribute(out, vnode)\r\n  return out\r\n}\r\n\r\nfunction diffAttribute (dom, vnode) {\r\n  // dom是原有的节点对象，vnode是虚拟dom\r\n  const domAttrs = document.querySelector('#root').attributes\r\n  console.log(domAttrs)\r\n}","import { renderComponent } from '../react-dom/index'\r\n\r\nclass Component {\r\n  constructor (props = {}) {\r\n    this.props = props;\r\n    this.state = {}\r\n  }\r\n\r\n  setState (stateChange) {\r\n    // 浅拷贝，将stateChange浅拷贝给this.state\r\n    Object.assign(this.state, stateChange)\r\n    // 数据改变实时渲染\r\n    renderComponent(this)\r\n  }\r\n}\r\n\r\nexport default Component","import Component from './component'\r\n\r\nfunction createElement (tag, attrs, ...childrens) {\r\n  return {\r\n    tag,\r\n    attrs,\r\n    childrens\r\n  }\r\n}\r\n\r\nexport default {\r\n  createElement,\r\n  Component\r\n}","import React from './react/index'\r\nimport ReactDOM from './react-dom/index'\r\n\r\nconst ele = (\r\n  <div className=\"attrs\">\r\n    123\r\n    <span>456</span>\r\n  </div>\r\n)\r\n\r\n// function Home () {\r\n//   return (\r\n//     <div className=\"hello\">\r\n//       <span>123</span>\r\n//     </div>\r\n//   )\r\n// }\r\n\r\n// class Home_ extends React.Component{\r\n//   constructor (props) {\r\n//     super (props)\r\n//     this.state = {\r\n//       num: 0\r\n//     }\r\n//   }\r\n\r\n//   // 生命周期函数，我个人觉得我们需要在Component内部进行构建\r\n\r\n//   componentWillMount () {\r\n//     console.log(\"组件开始加载\")\r\n//   }\r\n\r\n//   componentWillReceiveProps (props) {\r\n//     console.log('props-加载', props)\r\n//   }\r\n\r\n//   componentWillUpdate () {\r\n//     console.log(\"组件将要更新\")\r\n//   }\r\n\r\n//   componentDidUpdate () {\r\n//     console.log(\"组件已经更新\")\r\n//   }\r\n\r\n//   componentDidMount () {\r\n//     console.log(\"组件加载完成\")\r\n//   }\r\n\r\n//   click = () => {\r\n//     this.setState({\r\n//       num: this.state.num + 1\r\n//     })\r\n//   }\r\n\r\n//   render () {\r\n//     return (\r\n//       <div className=\"hello\">\r\n//         <span>123456--{this.state.num}</span>\r\n//         <button onClick={this.click.bind(this)}>+</button>\r\n//       </div>\r\n//     )\r\n//   }\r\n// }\r\n\r\n// const ele = <Home_ name={\"123123\"}/>\r\n// console.log(ele.tag)\r\n// console.log(ele.tag)\r\n// console.log(<Home />)\r\n\r\n// console.log(element)\r\n\r\n// const ele = 1\r\n\r\nReactDOM.render(ele, document.querySelector('#root'))\r\n\r\n// let element = 'str'\r\n// console.log(element);\r\n\r\n// ReactDOM.render(<Home_ name={'act'}/>, document.getElementById('root'))\r\n\r\n// console.log(ele)"],"names":["renderComponent","diff","dom","vnode","container","diffNode","ret","out","String","nodeType","textContent","document","createTextNode","parentNode","replaceNode","createElement","tag","domAttrs","querySelector","attributes","console","log","diffAttribute","appendChild","ReactDOM","render","$0c8f2de8a103a81b$var$renderComponent","comp","base","props","inst","prototype","Component","constructor","this","createComponent","attrs","componentWillMount","componentWillReceiveProps","setComponentProps","childrens","Object","keys","forEach","key","value","test","toLowerCase","k","style","cssText","setAttribute","removeAttribute","length","item","_render","componentWillUpdate","componentDidUpdate","componentDidMount","replaceChild","$3d25165bddfb7813$exports","state","setState","stateChange","assign","$0c8f2de8a103a81b$exports","$d9babb7323c18b36$exports","default","ele","$a501d8345a242c58$var$_index2","className"],"version":3,"file":"index.69310189.js.map"}