{"mappings":"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","sources":["react-dom/index.js","react-dom/diff.js","react/component.js","react/index.js","index.js"],"sourcesContent":["import Component from '../react/component'\r\n\r\nimport { diff, diffNode } from './diff'\r\n\r\nconst ReactDOM = {\r\n  render\r\n}\r\n\r\n// 创建自定义组件\r\n// vnode.tag, vnode.attrs\r\nexport function createComponent (comp, props) {\r\n  let inst\r\n  // 原型链非空，还有render方法，那么一定是类组件\r\n  if (comp.prototype && comp.prototype.render) {\r\n    // console.log(\"props\", props)\r\n    inst = new comp(props)\r\n    // console.log(\"inst\" ,inst)\r\n  } else {\r\n    // 如果不是类组件，我们就也是用类组件创建\r\n    inst = new Component(props)\r\n    // 将构造函数赋值，函数组件原来的tag就是函数本身，因此用于构造函数十分切合\r\n    inst.constructor = comp\r\n    // 每一个类组件都有一个render方法，对该render进行赋值给其他函数，并且是返回一个构造函数内部的jsx\r\n    inst.render = function () {\r\n      return this.constructor(props)\r\n    }\r\n  }\r\n  return inst\r\n}\r\n\r\n// 这是为了给comp内部添加base对象而设置的函数\r\n// 组件更新可以设置生命周期\r\nexport function renderComponent (comp) {\r\n  // 定义组件内部的节点对象\r\n  let base\r\n\r\n  // 拿到了元素\r\n  const renderer = comp.render()\r\n  // console.log(renderer)\r\n\r\n  if (comp.base && componentWillUpdate) {\r\n    comp.componentWillUpdate()\r\n  }\r\n\r\n  // renderer是获取了类组件内部的元素，但还是需要一层_render()函数解析，不然还是无法解析\r\n  // base = _render(renderer)\r\n  console.log(\"comp\", comp)\r\n  console.log(\"renderer\", renderer)\r\n  base = diffNode(comp.childNodes, renderer)\r\n\r\n  if (comp.base) {\r\n    if (comp.componentDidUpdate) {\r\n      comp.componentDidUpdate()\r\n    }\r\n  } else if (comp.componentDidMount) {\r\n    comp.componentDidMount()\r\n  }\r\n\r\n  // if (comp.base && comp.base.parentNode) {\r\n  //   // replaceChild是只能用于子组件，因此我们必须使用parentNode\r\n  //   // 将base赋值给comp.base\r\n  //   comp.base.parentNode.replaceChild(base, comp.base)\r\n  // }\r\n  comp.base = base\r\n}\r\n\r\nexport function setComponentProps (comp, props) {\r\n  if (!comp.base) {\r\n    if (comp.componentWillMount) {\r\n      comp.componentWillMount()\r\n    }\r\n    if (comp.componentWillReceiveProps) {\r\n      comp.componentWillReceiveProps(props)\r\n    }\r\n  }\r\n  // 设置组件的属性\r\n  comp.props = props\r\n  // 渲染组件\r\n  renderComponent(comp)\r\n}\r\n\r\nfunction _render (vnode) {\r\n  if (vnode === undefined || vnode === null || typeof vnode === 'boolean') vnode = ''\r\n  if (typeof vnode === 'number') {\r\n    vnode = String(vnode)\r\n  }\r\n  if (typeof vnode === 'string') {\r\n    return document.createTextNode(vnode)\r\n  }\r\n\r\n  // 判断是否为函数组件或类组件【根据tag，也就是当前组件来分析】\r\n  // 必须在render下才能将attrs变成props\r\n  if (typeof vnode.tag === 'function') {\r\n    // 1.创建组件\r\n    const comp = createComponent(vnode.tag, vnode.attrs)\r\n    // 2.设置组件的属性，在这里，所有的属性都在这里变成了props\r\n    setComponentProps(comp, vnode.attrs)\r\n    // 3.组件渲染的节点对象返回\r\n    return comp.base\r\n  }\r\n\r\n  const { tag, attrs, childrens } = vnode\r\n  const dom = document.createElement(tag)\r\n\r\n  if (attrs) {\r\n    Object.keys(attrs).forEach(key => {\r\n      const value = attrs[key]\r\n      setAttribute(dom, key, value)\r\n    })\r\n  }\r\n\r\n  if (childrens?.length > 0) {\r\n    for (let item of childrens) {\r\n      render(item, dom)\r\n    }\r\n  }\r\n  return dom\r\n}\r\n\r\nfunction render (vnode, container, dom) {\r\n  return diff(dom, vnode, container)\r\n  // return container.appendChild(_render(vnode))\r\n}\r\n\r\n// 设置属性【value为key对应的键值】\r\nexport function setAttribute (dom, key, value) {\r\n  // 将属性名的className转换成class\r\n  if (key === 'className') {\r\n    key = 'class'\r\n  }\r\n\r\n  // 转换事件\r\n  if (/on\\w+/.test(key)) {\r\n    key = key.toLowerCase()\r\n    dom[key] = value || ''\r\n  } else if (key === 'style') {\r\n    if (!value || typeof value === 'string') {\r\n      dom.style.cssText = value || '' \r\n    } else if (value && typeof value === 'object') {\r\n      for(let k in value) {\r\n        if (typeof value[k] === 'number') {\r\n          dom.style[k] = value[k] + 'px'\r\n        } else {\r\n          dom.style[k] = value[k]\r\n        }\r\n      }\r\n    }\r\n  } else {\r\n    if (key in dom) {\r\n      dom[key] = value || ''\r\n    }\r\n\r\n    if (value) {\r\n      dom.setAttribute(key, value)\r\n    } else {\r\n      dom.removeAttribute(key)\r\n    }\r\n  }\r\n}\r\n\r\nexport default ReactDOM","import { setAttribute, setComponentProps, createComponent } from \"./index\"\r\n\r\nexport function diff (dom, vnode, container) {\r\n  // 对比节点的变化\r\n  let ret = diffNode(dom, vnode)\r\n  if (container) {\r\n    container.appendChild(ret)\r\n  }\r\n\r\n  return ret\r\n}\r\n\r\nexport function diffNode (dom, vnode) {\r\n  let out = dom\r\n  if (vnode === undefined || vnode === null || typeof vnode === 'boolean') vnode = '-'\r\n  if (typeof vnode === 'number') {\r\n    vnode = String(vnode)\r\n  }\r\n  if (typeof vnode === 'string') {\r\n    if (dom && dom.nodeType === 3) {\r\n      if (dom.textContent !== vnode) {\r\n        dom.textContent = vnode\r\n      }\r\n    } else {\r\n      out = document.createTextNode(vnode)\r\n      if (dom && dom.parentNode) {\r\n        dom.parentNode.replaceNode(out, dom)\r\n      }\r\n    }\r\n    return out\r\n  }\r\n  if (typeof vnode.tag === 'function') {\r\n\r\n    dom = diffComponent(out, vnode)\r\n  }\r\n\r\n  // 非文本dom节点\r\n  if (!dom) {\r\n    out = document.createElement(vnode.tag)\r\n  }\r\n  // 比较子节点\r\n  if (vnode.childrens && vnode.childrens.length > 0 || (out && out?.childNodes && out?.childNodes.length > 0)) {\r\n    diffChildren(out, vnode.childrens)\r\n  }\r\n\r\n  diffAttribute(out, vnode)\r\n  return out\r\n}\r\n\r\nfunction diffComponent (dom, vnode) {\r\n  let comp = dom\r\n  // 如果组件没有变化，只需要重新设置props即可\r\n  if (comp && comp.constructor === vnode.tag) {\r\n    // 重新设置props\r\n    setComponentProps(comp, vnode.attrs)\r\n    // 赋值\r\n    dom = comp.base\r\n  } else {\r\n    // 组件类型发生变化\r\n    if (comp) {\r\n      // 移除旧的组件\r\n      unmountComponent(comp)\r\n      // 释放\r\n      comp = null\r\n    }\r\n\r\n    // 创建新组件\r\n    comp = createComponent(vnode.tag, vnode.attrs)\r\n    // 设置组件属性\r\n    setComponentProps(comp, vnode.attrs)\r\n    // 给当前挂载base\r\n    dom = comp.base\r\n  }\r\n  return dom\r\n}\r\n\r\nfunction unmountComponent (comp) {\r\n  removeNode(comp.base)\r\n}\r\n\r\nfunction removeNode (dom) {\r\n  if (dom && dom.parentNode) {\r\n    dom.parentNode.removeNode(dom)\r\n  }\r\n}\r\n\r\nfunction diffChildren (dom, vchildren) {\r\n  const domChildren = dom.childNodes\r\n  const children = []\r\n  const keyed = {}\r\n\r\n  // 将有key的节点和没有key的节点分开\r\n  if (domChildren.length > 0) {\r\n    [...domChildren].forEach(item => {\r\n      const key = item.key\r\n      if (key) {\r\n        keyed[key] = item\r\n      } else {\r\n        children.push(item)\r\n      }\r\n    })\r\n  }\r\n  if (vchildren && vchildren.length > 0) {\r\n    let min = 0\r\n    let childrenLen = children.length;\r\n    [...vchildren].forEach((vchild, i) => {\r\n      const key = vchild.key\r\n      let child\r\n      if (key) {\r\n        // 如果有key，找到对应key的节点\r\n        if (keyed[key]) {\r\n          child = keyed[key]\r\n          keyed[key] = undefined\r\n        } \r\n      } else if (childrenLen > min) {\r\n        for (let j = min; j < childrenLen; j++) {\r\n          let c = children[j]\r\n          if (c) {\r\n            child = c\r\n            children[j] = undefined\r\n            if (j === childrenLen - 1) {\r\n              childrenLen--\r\n            }\r\n            if (j === min) {\r\n              min++\r\n            }\r\n            break\r\n          }\r\n        }\r\n      }\r\n      // 对比\r\n      child = diffNode(child, vchild)\r\n      // 更新dom\r\n      const f = domChildren[i]\r\n\r\n      if (child && child !== dom && child !== f) {\r\n        if (!f) {\r\n          dom.appendChild(child)\r\n        } else if (child === f.nextSibling) {\r\n          removeNode(f)\r\n        } else {\r\n          dom.insertBefore(child, f)\r\n        }\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nfunction diffAttribute (dom, vnode) {\r\n  // 保存之前的dom所有的属性\r\n  const oldAttrs = {}\r\n  const newAttrs = vnode.attrs\r\n  // dom是原有的节点对象，vnode是虚拟dom\r\n  // 取出dom的属性\r\n  const domAttrs = dom.attrs\r\n  // console.log(domAttrs);\r\n  ;[...domAttrs].forEach(item => {\r\n    oldAttrs[item.name] = item.value\r\n  })\r\n  // console.log(oldAttrs)\r\n\r\n  // 比较\r\n  // 如果原来的属性跟新属性对比不在新属性中，则将其移除【属性值undefined就行】\r\n  for (let key in oldAttrs) {\r\n    if (!(key in newAttrs)) {\r\n      setAttribute(dom, key, undefined)\r\n    }\r\n  }\r\n  // 如果旧的属性和新属性不同，就改变旧的\r\n  for (let key in newAttrs) {\r\n    if (oldAttrs[key] !== newAttrs[key]) {\r\n      setAttribute(dom, key, newAttrs[key])\r\n    }\r\n  }\r\n}","import { renderComponent } from '../react-dom/index'\r\n\r\nclass Component {\r\n  constructor (props = {}) {\r\n    this.props = props;\r\n    this.state = {}\r\n  }\r\n\r\n  setState (stateChange) {\r\n    // 浅拷贝，将stateChange浅拷贝给this.state\r\n    Object.assign(this.state, stateChange)\r\n    // 数据改变实时渲染\r\n    renderComponent(this)\r\n  }\r\n}\r\n\r\nexport default Component","import Component from './component'\r\n\r\nfunction createElement (tag, attrs, ...childrens) {\r\n  attrs = attrs || {}\r\n  return {\r\n    tag,\r\n    attrs,\r\n    childrens,\r\n    key: attrs.key || null\r\n  }\r\n}\r\n\r\nexport default {\r\n  createElement,\r\n  Component\r\n}","import React from './react/index'\r\nimport ReactDOM from './react-dom/index'\r\n\r\n// const ele = (\r\n//   <div className=\"attrs\">\r\n//     123\r\n//     <span>456</span>\r\n//   </div>\r\n// )\r\n\r\n// function Home_ () {\r\n//   return (\r\n//     <div className=\"hello\">\r\n//       <span>123</span>\r\n//     </div>\r\n//   )\r\n// }\r\n\r\nclass Home_ extends React.Component{\r\n  constructor (props) {\r\n    super (props)\r\n    this.state = {\r\n      num: 0\r\n    }\r\n  }\r\n\r\n  // 生命周期函数，我个人觉得我们需要在Component内部进行构建\r\n\r\n  // componentWillMount () {\r\n  //   console.log(\"组件开始加载\")\r\n  // }\r\n\r\n  // componentWillReceiveProps (props) {\r\n  //   console.log('props-加载', props)\r\n  // }\r\n\r\n  // componentWillUpdate () {\r\n  //   console.log(\"组件将要更新\")\r\n  // }\r\n\r\n  // componentDidUpdate () {\r\n  //   console.log(\"组件已经更新\")\r\n  // }\r\n\r\n  // componentDidMount () {\r\n  //   console.log(\"组件加载完成\")\r\n  // }\r\n\r\n  click = () => {\r\n    this.setState({\r\n      num: this.state.num + 1\r\n    })\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div className=\"rng\">\r\n        <span class=\"fuck\">123456--{this.state.num}</span>\r\n        <button onClick={this.click.bind(this)} class=\"U\">+</button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n// const ele = <Home_ name={\"123123\"}/>\r\n// console.log(ele.tag)\r\n// console.log(ele.tag)\r\n// console.log(<Home />)\r\n\r\n// console.log(element)\r\n\r\n// const ele = 1\r\n\r\n// ReactDOM.render(ele, document.querySelector('#root'))\r\n\r\n// let element = 'str'\r\n// console.log(element);\r\n\r\nReactDOM.render(<Home_ name={'act'}/>, document.getElementById('root'))\r\n\r\n// console.log(ele)"],"names":["createComponent","renderComponent","setComponentProps","setAttribute","diffNode","dom","vnode","out","String","nodeType","textContent","document","createTextNode","parentNode","replaceNode","tag","comp","constructor","$0c8f2de8a103a81b$exports","attrs","base","removeNode","unmountComponent","diffComponent","createElement","childrens","length","childNodes","vchildren","domChildren","children","keyed","forEach","item","key","push","min","childrenLen","vchild","i","child","undefined","j","c","f","nextSibling","insertBefore","appendChild","diffChildren","oldAttrs","newAttrs","name","value","diffAttribute","diff","container","ret","ReactDOM","render","props","inst","prototype","Component","this","$0c8f2de8a103a81b$var$renderComponent","renderer","componentWillUpdate","console","log","$3d25165bddfb7813$exports","componentDidUpdate","componentDidMount","componentWillMount","componentWillReceiveProps","test","toLowerCase","k","style","cssText","removeAttribute","state","setState","stateChange","Object","assign","$d9babb7323c18b36$exports","default","Home_","React","super","num","click","$a501d8345a242c58$var$_index2","className","class","onClick","bind","$a501d8345a242c58$var$Home_","getElementById"],"version":3,"file":"index.5b9e1775.js.map"}